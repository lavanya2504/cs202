# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.graph.clone_graph as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    module_0.clone_graph1(bool_0)


def test_case_1():
    none_type_0 = None
    var_0 = module_0.clone_graph1(none_type_0)
    var_1 = module_0.clone_graph(var_0)
    var_2 = module_0.clone_graph1(none_type_0)


def test_case_2():
    bool_0 = True
    undirected_graph_node_0 = module_0.UndirectedGraphNode(bool_0)
    var_0 = module_0.clone_graph2(undirected_graph_node_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "algorithms.graph.clone_graph.UndirectedGraphNode"
    )
    assert var_0.label is True
    assert var_0.neighbors == []


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    var_0 = module_0.clone_graph1(none_type_0)
    var_1 = module_0.clone_graph2(none_type_0)
    var_2 = var_1.__repr__()
    var_3 = module_0.clone_graph(var_1)
    var_0.isdecimal()


def test_case_4():
    none_type_0 = None
    var_0 = module_0.clone_graph2(none_type_0)
    var_1 = module_0.clone_graph(none_type_0)
    undirected_graph_node_0 = module_0.UndirectedGraphNode(none_type_0)
    var_2 = module_0.clone_graph(undirected_graph_node_0)
    var_3 = module_0.clone_graph1(undirected_graph_node_0)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "algorithms.graph.clone_graph.UndirectedGraphNode"
    )
    assert var_3.label is None
    assert var_3.neighbors == []


def test_case_5():
    bool_0 = True
    undirected_graph_node_0 = module_0.UndirectedGraphNode(bool_0)
    var_0 = undirected_graph_node_0.shallow_copy()
    var_1 = module_0.clone_graph2(undirected_graph_node_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "algorithms.graph.clone_graph.UndirectedGraphNode"
    )
    assert var_1.label is True
    assert var_1.neighbors == []
    var_2 = var_1.add_neighbor(var_0)
    assert (
        f"{type(var_1.neighbors).__module__}.{type(var_1.neighbors).__qualname__}"
        == "builtins.list"
    )
    assert len(var_1.neighbors) == 1


@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    none_type_1 = None
    undirected_graph_node_0 = module_0.UndirectedGraphNode(none_type_1)
    var_0 = module_0.clone_graph(none_type_1)
    var_1 = module_0.dfs(undirected_graph_node_0, none_type_0)
    undirected_graph_node_0.pop(var_1)


def test_case_7():
    none_type_0 = None
    undirected_graph_node_0 = module_0.UndirectedGraphNode(none_type_0)
    var_0 = module_0.clone_graph1(undirected_graph_node_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "algorithms.graph.clone_graph.UndirectedGraphNode"
    )
    assert var_0.label is None
    assert var_0.neighbors == []


@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    var_0 = module_0.clone_graph2(none_type_0)
    undirected_graph_node_0 = module_0.UndirectedGraphNode(none_type_0)
    var_1 = module_0.clone_graph(var_0)
    var_2 = module_0.clone_graph(undirected_graph_node_0)
    var_3 = undirected_graph_node_0.add_neighbor(var_0)
    module_0.clone_graph1(undirected_graph_node_0)


def test_case_9():
    none_type_0 = None
    var_0 = module_0.clone_graph2(none_type_0)
    undirected_graph_node_0 = module_0.UndirectedGraphNode(none_type_0)
    var_1 = undirected_graph_node_0.shallow_copy()
    var_2 = module_0.clone_graph(var_0)
    var_3 = module_0.clone_graph1(undirected_graph_node_0)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "algorithms.graph.clone_graph.UndirectedGraphNode"
    )
    assert var_3.label is None
    assert var_3.neighbors == []
    var_4 = undirected_graph_node_0.add_neighbor(var_1)
    var_5 = module_0.clone_graph2(undirected_graph_node_0)
    assert len(var_5.neighbors) == 1
    var_6 = module_0.clone_graph(var_3)
    assert (
        f"{type(var_6).__module__}.{type(var_6).__qualname__}"
        == "algorithms.graph.clone_graph.UndirectedGraphNode"
    )
    assert var_6.label is None
    assert var_6.neighbors == []
    undirected_graph_node_1 = module_0.UndirectedGraphNode(none_type_0)
    var_7 = module_0.clone_graph(none_type_0)
    var_8 = module_0.clone_graph(var_2)
    var_9 = undirected_graph_node_0.add_neighbor(var_7)
    var_10 = module_0.clone_graph1(var_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    none_type_0 = None
    undirected_graph_node_0 = module_0.UndirectedGraphNode(none_type_0)
    var_0 = module_0.clone_graph(undirected_graph_node_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "algorithms.graph.clone_graph.UndirectedGraphNode"
    )
    assert var_0.label is None
    assert var_0.neighbors == []
    var_1 = module_0.clone_graph(undirected_graph_node_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "algorithms.graph.clone_graph.UndirectedGraphNode"
    )
    assert var_1.label is None
    assert var_1.neighbors == []
    var_2 = undirected_graph_node_0.add_neighbor(var_0)
    var_3 = module_0.clone_graph1(undirected_graph_node_0)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "algorithms.graph.clone_graph.UndirectedGraphNode"
    )
    assert var_3.label is None
    assert (
        f"{type(var_3.neighbors).__module__}.{type(var_3.neighbors).__qualname__}"
        == "builtins.list"
    )
    assert len(var_3.neighbors) == 1
    undirected_graph_node_0.clear()


@pytest.mark.xfail(strict=True)
def test_case_11():
    none_type_0 = None
    var_0 = module_0.clone_graph2(none_type_0)
    undirected_graph_node_0 = module_0.UndirectedGraphNode(none_type_0)
    var_1 = undirected_graph_node_0.add_neighbor(undirected_graph_node_0)
    var_2 = module_0.clone_graph(var_0)
    var_3 = module_0.clone_graph(undirected_graph_node_0)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "algorithms.graph.clone_graph.UndirectedGraphNode"
    )
    assert var_3.label is None
    assert (
        f"{type(var_3.neighbors).__module__}.{type(var_3.neighbors).__qualname__}"
        == "builtins.list"
    )
    assert len(var_3.neighbors) == 1
    var_4 = module_0.clone_graph2(var_3)
    assert len(var_4.neighbors) == 1
    var_5 = module_0.clone_graph1(undirected_graph_node_0)
    assert (
        f"{type(var_5).__module__}.{type(var_5).__qualname__}"
        == "algorithms.graph.clone_graph.UndirectedGraphNode"
    )
    assert var_5.label is None
    assert (
        f"{type(var_5.neighbors).__module__}.{type(var_5.neighbors).__qualname__}"
        == "builtins.list"
    )
    assert len(var_5.neighbors) == 1
    undirected_graph_node_0.clear()


@pytest.mark.xfail(strict=True)
def test_case_12():
    none_type_0 = None
    undirected_graph_node_0 = module_0.UndirectedGraphNode(none_type_0)
    var_0 = undirected_graph_node_0.add_neighbor(undirected_graph_node_0)
    var_1 = module_0.clone_graph(undirected_graph_node_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "algorithms.graph.clone_graph.UndirectedGraphNode"
    )
    assert var_1.label is None
    assert (
        f"{type(var_1.neighbors).__module__}.{type(var_1.neighbors).__qualname__}"
        == "builtins.list"
    )
    assert len(var_1.neighbors) == 1
    var_2 = undirected_graph_node_0.add_neighbor(var_0)
    var_2.__delitem__(var_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    none_type_0 = None
    var_0 = module_0.clone_graph2(none_type_0)
    undirected_graph_node_0 = module_0.UndirectedGraphNode(none_type_0)
    var_1 = module_0.clone_graph(var_0)
    var_2 = module_0.clone_graph(undirected_graph_node_0)
    var_3 = undirected_graph_node_0.add_neighbor(var_0)
    var_4 = module_0.clone_graph2(var_2)
    module_0.clone_graph(undirected_graph_node_0)
